'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var react = require('@headlessui/react');
var classNames = _interopDefault(require('classnames'));

var ToggleSwitch = function ToggleSwitch(_ref) {
  var enabled = _ref.enabled,
      onChange = _ref.onChange;
  return React.createElement(react.Switch, {
    checked: enabled,
    onChange: onChange,
    className: (enabled ? 'bg-green-500' : 'bg-gray-400') + "\n          relative inline-flex flex-shrink-0 h-7 w-14 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75"
  }, React.createElement("span", {
    className: "sr-only"
  }, "Use setting"), React.createElement("span", {
    "aria-hidden": "true",
    className: (enabled ? 'translate-x-7' : 'translate-x-0') + "\n            pointer-events-none inline-block h-6 w-6 rounded-full bg-white shadow-lg transform ring-0 transition ease-in-out duration-200"
  }));
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ThemeContext = /*#__PURE__*/React.createContext({
  currentTheme: function currentTheme() {},
  setTheme: function setTheme() {}
});
var ThemeProvider = function ThemeProvider(_ref) {
  var theme = _ref.theme,
      children = _ref.children;

  var _React$useState = React.useState(theme),
      activeTheme = _React$useState[0],
      setActiveTheme = _React$useState[1];

  var currentTheme = function currentTheme() {
    return activeTheme;
  };

  var setTheme = function setTheme(theme) {
    setActiveTheme(theme);
  };

  return React.createElement(ThemeContext.Provider, {
    value: {
      currentTheme: currentTheme,
      setTheme: setTheme
    }
  }, children);
};
var useTheme = function useTheme() {
  return React.useContext(ThemeContext).currentTheme();
};
var setTheme = function setTheme(theme) {
  return React.useContext(ThemeContext).setTheme(theme);
};

var _excluded = ["disabled", "title"];
var Button = function Button(_ref) {
  var disabled = _ref.disabled,
      title = _ref.title,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  var theme = useTheme();
  var bg = 'bg-' + theme.umbrella[100];
  console.log(bg);
  var classes = classNames(bg, rest.className, 'text-blue-700', 'font-semibold', 'hover:text-white', 'py-2', 'px-4', 'border', 'border-blue-500', 'hover:bg-blue-500', 'hover:border-transparent', 'rounded disabled:text-gray-400 disabled:border-gray-400 disabled:cursor-default');
  return React.createElement("button", Object.assign({
    className: classes,
    disabled: disabled
  }, rest), title);
};

var _excluded$1 = ["className", "color"];
var Input = function Input(props) {
  var className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'orange-300' : _props$color,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$1);

  var textColor = "bg-" + color;
  var bgColor = "bg-" + color;
  var classes = classNames(className, textColor, bgColor, 'w-full', 'py-2', 'px-1', 'border');
  return React.createElement("input", Object.assign({
    className: classes
  }, restProps));
};

var defaultTheme = {
  umbrella: {
    100: 'blue-500'
  }
};

var extendTheme = function extendTheme(theme) {
  return _extends({}, defaultTheme, theme);
};

(function (TailwindColorBase) {
  TailwindColorBase["ROSE"] = "rose";
  TailwindColorBase["PINK"] = "pink";
  TailwindColorBase["FUCHSIA"] = "fuchsia";
  TailwindColorBase["PURPLE"] = "purple";
  TailwindColorBase["VIOLET"] = "violet";
  TailwindColorBase["INDIGO"] = "indigo";
  TailwindColorBase["BLUE"] = "blue";
  TailwindColorBase["SKY"] = "sky";
  TailwindColorBase["CYAN"] = "cyan";
  TailwindColorBase["TEAL"] = "teal";
  TailwindColorBase["EMERALD"] = "emerald";
  TailwindColorBase["GREEN"] = "green";
  TailwindColorBase["LIME"] = "lime";
  TailwindColorBase["YELLOW"] = "amber";
  TailwindColorBase["ORANGE"] = "orange";
  TailwindColorBase["RED"] = "red";
  TailwindColorBase["STONE"] = "stone";
  TailwindColorBase["NEUTRAL"] = "neutral";
  TailwindColorBase["ZINC"] = "zinc";
  TailwindColorBase["GRAY"] = "gray";
  TailwindColorBase["SLATE"] = "slate";
})(exports.TailwindColorBase || (exports.TailwindColorBase = {}));

exports.Button = Button;
exports.Input = Input;
exports.ThemeContext = ThemeContext;
exports.ThemeProvider = ThemeProvider;
exports.ToggleSwitch = ToggleSwitch;
exports.defaultTheme = defaultTheme;
exports.extendTheme = extendTheme;
exports.setTheme = setTheme;
exports.useTheme = useTheme;
