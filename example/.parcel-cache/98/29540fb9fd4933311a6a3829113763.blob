'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var react = require('@headlessui/react');
var classNames = _interopDefault(require('classnames'));

var ToggleSwitch = function ToggleSwitch(_ref) {
  var enabled = _ref.enabled,
      onChange = _ref.onChange;
  return React.createElement(react.Switch, {
    checked: enabled,
    onChange: onChange,
    className: (enabled ? 'bg-green-500' : 'bg-gray-400') + "\n          relative inline-flex flex-shrink-0 h-7 w-14 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75"
  }, React.createElement("span", {
    className: "sr-only"
  }, "Use setting"), React.createElement("span", {
    "aria-hidden": "true",
    className: (enabled ? 'translate-x-7' : 'translate-x-0') + "\n            pointer-events-none inline-block h-6 w-6 rounded-full bg-white shadow-lg transform ring-0 transition ease-in-out duration-200"
  }));
};

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["disabled", "title"];
var Button = function Button(_ref) {
  var disabled = _ref.disabled,
      title = _ref.title,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  var classes = classNames(rest.className, 'bg-transparent', 'text-blue-700', 'font-semibold', 'hover:text-white', 'py-2', 'px-4', 'border', 'border-blue-500', 'hover:bg-blue-500', 'hover:border-transparent', 'rounded disabled:text-gray-400 disabled:border-gray-400 disabled:cursor-default');
  return React.createElement("button", Object.assign({
    className: classes,
    disabled: disabled
  }, rest), title);
};

var _excluded$1 = ["className"];
var Input = function Input(props) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$1);

  return React.createElement("input", Object.assign({
    className: classNames('placeholder:text-red-500 p-12 text-xl', {
      className: className
    })
  }, rest));
};

exports.Button = Button;
exports.Input = Input;
exports.ToggleSwitch = ToggleSwitch;
